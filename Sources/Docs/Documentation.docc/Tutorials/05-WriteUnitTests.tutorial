@Tutorial(time: 20) {
  @Intro(title: "Test support 機能を利用した Unit Test の実装") {
    前のチュートリアルでは swift-dependencies によって依存関係を制御し、Xcode Previews の実装を改善する方法を学びました。  
    しかし、依存関係が制御できるようになって書きやすくなったのは Previews だけではありません。  
    
    このチュートリアルでは、依存関係を制御しつつリポジトリ一覧画面の Unit Test を作成していきます。  
    Unit Test の作成を通して、TCA のテストサポート機能を利用したテストの書き方を学んでいきましょう。
  }

  @Section(title: "画面表示時に発生する API 通信の Unit Test") {
    @ContentAndMedia {
      まずは TCA におけるテストの書き方を理解するために、リポジトリ一覧画面表示時に発生する API 通信の Unit Test を作成していきましょう。  
    }
    @Steps {
      @Step {
        最初に必要な依存関係の import を行い、テストを書くための function を持った class も作成します。  
        TCA のテストサポート機能は `@MainActor` の context で動作することを前提とするため、class 自体も `@MainActor` にしておく必要があります。  
        また、テストサポート機能では、async な API も利用することになるため、テスト用の function は async function として定義します。

        @Code(name: "RepositoryListFeatureTests.swift", file: 05-01-code-0001.swift)
      }
      @Step {
        少しずつテストを実装していきます。  
        TCA においては Reducer にロジックが記述されることになるため、基本的には Reducer のテストを書いていくことになります。  
        実際のアプリでは、Reducer を駆動させるランタイムとして `Store` が利用されますが、テスト用のランタイムとして `TestStore` が用意されているため、テストではそれを利用できます。  
        `TestStore` は `Store` と同じく、`initialState` と Reducer を提供することで initialize できるため、実装してみましょう。

        @Code(name: "RepositoryListFeatureTests.swift", file: 05-01-code-0002.swift)
      }
      @Step {
        `TestStore` には、テストを書きやすくしてくれるいくつかの API が存在しているため、それを利用してテストを書いていきます。   
        TCA における Reducer では、何らかの `Action` が send されて、その結果 `State` が変更され、場合によってはまた `Action` が send されて... という形で処理が行われていきますが、`TestStore` を用いることで、その流れを簡単にテストできるようになっています。    
        それでは、まずは `TestStore` の `send` function を使って、`onAppear` Action が送られた時の動作をテストします。  
        `send` は Action を提供しつつ、その Action によって起きるはずの State の変更を closure に提供するという形でテストできるようになっています。
        
        @Code(name: "RepositoryListFeatureTests.swift", file: 05-01-code-0003.swift)
      }
      @Step {
        この状態でテストを実行してみると、テストが失敗してしまいます。  
        TCA はテスト結果をわかりやすく表示できることも特徴であるため、その失敗結果を見てみると「Unhandled actions」と「Unimplemented」というエラーがあることがわかります。  
        「Unhandled actions」は、本来発生するはずの Action をテストで Assert できていないため発生しています。  
        「Unimplemented」は、`onAppear` の処理中に発生する API 通信で `GitHubAPIClient` が利用され、その依存関係が先ほど実装した `testValue` の実装で動作しているために発生しています。`testValue` の実装は、前に説明したように `unimplemented` で提供されているためです。  
        このように、`unimplemented` を利用すれば、依存関係の上書きをテスト作成側に強制することができ、例えば意図していない依存関係が呼ばれていることにテストで気づくこともできます。

        @Image(source: "05-01-image-0004.png", alt: "テストが二つの原因で失敗している図")
      }
      @Step {
        それでは、先に「Unimplemented」で失敗している原因となっている、`GitHubAPIClient` の実装をテスト用に上書きしていきましょう。  
        Preview の実装時に `withDependencies` を使って依存関係を上書きしましたが、`TestStore` でも同じことができるため、同じように適当な mock で依存関係を上書きしてみましょう。

        @Code(name: "RepositoryListFeatureTests.swift", file: 05-01-code-0005.swift)
      }
      @Step {
        この状態でテストを実行してみましょう。  
        先ほどとは異なり「Unhandled actions」だけのエラーになっているはずです。  

        @Image(source: "05-01-image-0006.png", alt: "テストが一つの原因で失敗している図")
      }
      @Step {
        「Unhandled actions」が起きている原因は、`onAppear` Action の発火によって API 通信が発生し、その後に `searchRepositoriesResponse` Action が発火するはずですが、その Action の Assert がテストに記述されていないためです。  
        先ほどは Action を明示的に送信するために `send` function を利用しましたが、Reducer の処理の流れで発生するはずの Action を Assert するためには `receive` function を利用します。  
        記述方法はほとんど `send` と同様なので書いてみましょう。  
        この状態でテストを実行すれば、無事テストが成功するはずです。

        @Code(name: "RepositoryListFeatureTests.swift", file: 05-01-code-0007.swift)
      }
    }
  }

  @Section(title: "リポジトリ検索機能の Unit Test") {
    @ContentAndMedia {
      TCA のテストに少し慣れてきたところで、もう少し発展的なテストとしてリポジトリ検索機能のテストコードを書いてみましょう。  
      また、テストコードを書く途中で少しだけ既存のコードの改善も行います。
    }
    @Steps {
      @Step {
        リポジトリ検索機能のテストを書いていくために `testQueryChanged` というテスト用の新しい function を作成します。  
        リポジトリ検索でも API 通信は発生するため、先ほどと同じように `GitHubAPIClient` の実装を mock しつつ、`TestStore` を作成しましょう。

        @Code(name: "RepositoryListFeatureTests.swift", file: 05-02-code-0001.swift, previousFile: 05-01-code-0007.swift)
      }
      @Step {
        リポジトリ検索の処理を模倣するためには `State` の `query` に対して文字列が格納される挙動を表現する必要があります。  
        `BindingAction` には、この用途でも利用できる `set(_:_:)` が用意されているため、これを利用して検索フィールドに `test` という文字列が入力される挙動を表現してみましょう。
        
        @Code(name: "RepositoryListFeatureTests.swift", file: 05-02-code-0002.swift)
      }
      `query` に文字列が入力されると Reducer の実装によって、0.3 秒以内に次の入力がなければ API 通信が始まります。  
      そのため、現状のテストコードでテストを実行すると、その挙動を Assert するためのコードを書いていないため、テストに失敗するはずです。

      @Step {
        仮にこのまま API 通信のレスポンスを受け取るテストコードを書いたとしても、テストは同じように失敗してしまいます。  
        原因は、0.3 秒経過しないと API 通信が発火しないコードとなっているためです。  
        この問題を解決するためには、元の実装を少し修正する必要があります。  
        現在は、`DispatchQueue.main` を指定して 0.3 秒の `debounce` を表現していますが、`DispatchQueue.main` を直接指定してしまっているために、テストでこの依存関係を制御できない状態となっています。  
        swift-dependencies には、このために利用できる `@Dependency(\.mainQueue)` が用意されているため、これを利用するように変更しましょう。
        
        @Code(name: "RepositoryListView.swift", file: 05-02-code-0003.swift, previousFile: 05-02-code-0003-previous.swift)
      }
      @Step {
        実装を修正できたので、テストコードに戻って修正していきます。  
        実装の方で `@Dependency(\.mainQueue)` を利用するようになったため、この `mainQueue` の依存関係をテスト上では上書きすることができます。  
        `mainQueue` のテスト用の依存関係は `CombineSchedulers` というライブラリに `DispatchQueue.test` として用意されているため、それを利用して依存関係を上書きしておきましょう。

        @Code(name: "RepositoryListFeatureTests.swift", file: 05-02-code-0004.swift, previousFile: 05-02-code-0002.swift)
        
        > CombineSchedulers も Point-Free のライブラリで、Combine に利用される `Scheduler` をテスタブルにしたり、より便利にできるようなものとなっています。詳しくは、ライブラリの [README](https://github.com/pointfreeco/combine-schedulers) 等を参照してください。
      }
      @Step {
        `DispatchQueue.test` は `testScheduler.advance(by:)` という形で、テスト上の時間を任意の秒数進めることができます。  
        そのため、これを利用して検索機能の `debounce` に指定されている 0.3 秒を進めつつ、それによって発火することになる Action や State の変更を適切に Assert してテストが成功する状態にしましょう。
        
        @Code(name: "RepositoryListFeatureTests.swift", file: 05-02-code-0005.swift)
        
        > `testScheduler.advance(by:)` で進めることができる時間についてですが、これは実際のテスト上の時間を消費しないように設計されています。  
        > 例えば、`XCTWaiter.wait(for:)` などを利用して、任意の秒数待つようにすることでもテストの時間を進めることはできますが、これを利用すると実際のテスト上の時間を消費してしまう上に、テストを不安定にさせてしまう可能性があります。  
        > この辺りの話については、少し古くなってしまっていますが Point-Free の [Schedulers](https://www.pointfree.co/collections/combine/schedulers) というエピソードが参考になります。  
        > また、0.3 秒 advance している部分を 0.2 秒などに変更するとテストが失敗することを見てみると、かなり正確なテストができていることがわかり面白いかもしれません。
      }
      ここまでのように、アプリにおける依存関係を正しく制御し、TCA のテストサポート機能を利用することで、アプリのフローを非常に簡潔な方法で、網羅的かつ正確にテストすることができます。  
      より効率的に開発していくためにも依存関係の制御は重要となってくるため、TCA を利用する際は今回紹介したような依存関係の制御方法を積極的に活用していきましょう。
    }
  }
}
