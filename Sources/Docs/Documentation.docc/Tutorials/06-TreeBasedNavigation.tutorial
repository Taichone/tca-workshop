@Tutorial(time: 30) {
  @Intro(title: "Tree-based navigation") {
    TCA には Alert や Confirmation Dialog, Popover, Sheet, FullScreenCover など、あらゆる Navigation (Point-Free はこれらを Tree-based navigation と定義しています) を表現するための API が用意されています。  
    それらの API は Navigation に関わる様々な問題を解決してくれたり、SwiftUI における Navigaiton をより便利にしてくれるものとなっています。  

    このチュートリアルでは Alert と画面遷移の実装を通して、TCA における Tree-based navigation の表現方法を学ぶことができます。
  }

  @Section(title: "Alert 機能の実装") {
    @ContentAndMedia {
      リポジトリ一覧画面では API 通信を行っていますが、通信が失敗した際のエラーハンドリングを行っていません。  
      そのため、そのハンドリングを Alert で簡単に行っていきます。  
      ここでは Alert の実装方法を学んで、TCA における Tree-based navigation の表現方法を掴んでいきましょう。
    }
    @Steps {
      @Step {
        TCA で Alert を表現するために、まずは必要な `State` と `Action` を定義する必要があります。  
        それぞれ `@Presents` macro と `PresentationAction` という型を利用して定義していきましょう。  
        `State` は swiftui-navigation というライブラリに用意されている `AlertState` も利用して定義します。  
        `Action` は `Alert` 用の blank な enum を定義しつつ、新しい `alert` case を追加します。

        @Code(name: "RepositoryListView.swift", file: 06-01-code-0001.swift, previousFile: 06-01-code-0001-previous.swift)
        
        > swiftui-navigation についての詳しい情報は、[リポジトリ](https://github.com/pointfreeco/swiftui-navigation)等を参照してください。
      }
      @Step {
        次に `body` で Alert を表示するための実装を行います。  
        `AlertState` は `TextState` という API によって表現できます。  
        ここでは、API 通信が失敗したことを簡単にユーザーに伝えられれば良いため、適当な title と message を持ったシンプルな Alert として実装しましょう。  
        また、先ほど `alert` Action を新たに追加したため、特に何も処理しない case として追加だけしておきます。
        
        @Code(name: "RepositoryListView.swift", file: 06-01-code-0002.swift)
      }
      @Step {
        次に進む前に、今実装した `AlertState` をもう少し汎用的なものにしておきます。  
        `AlertState` に static な property を生やしておくことで、`.networkError` のように利用できるようになります。  
        このようにしておくと、テストで Assert する時にも使い回すことができ便利なのでおすすめです。
        
        @Code(name: "RepositoryListView.swift", file: 06-01-code-0003.swift)
      }
      @Step {
        次に Alert を View で表示するために View の実装を追加します。  
        TCA には `Store` を受け付ける `alert` function が用意されており、これを利用することで Alert を表示できます。  
        `Store` を受け付ける点以外は、Pure SwiftUI の `alert` function とほとんど使い勝手は変わりません。  
        ここでは、`ForEach` を利用した時と同様に、`store.scope` を利用して `alert` function に必要な引数を提供します。  

        @Code(name: "RepositoryListView.swift", file: 06-01-code-0004.swift, previousFile: 06-01-code-0004-previous.swift)
      }
      @Step {
        ここまでの実装によって、エラーが発生したタイミングで Alert を表示できるようになっているはずです。  
        アプリを起動して頑張って確認しても良いのですが、ここでは Previews を活用して簡単に確認できるようにします。  
        `PreviewError` という適当な Error を定義し、`Store` の `withDependencies` を利用し、`searchRepositories` でエラーを throw するようにします。  
        これで Previews で Alert が確認できるはずです。

        @Code(name: "RepositoryListView.swift", file: 06-01-code-0005.swift) {
          @Image(source: "06-01-image-0005.png", alt: "Xcode Previews で Alert を確認できている図")
        }
      }
    }
  }

  @Section(title: "リポジトリ詳細画面への画面遷移の実装") {
    @ContentAndMedia {
      TCA の Tree-based navigation API を利用して Alert を表現できましたが、この API は Alert 以外にも様々な Navigation を表現できます。  
      ここではプロジェクトに既に用意されている「リポジトリ詳細画面 (`RepositoryDetailView`)」をリポジトリ一覧画面から表示できるようにしていきます。
    }
    @Steps {
      @Step {
        リポジトリ詳細画面に遷移できるようにする前に、先ほどの Alert のための実装を拡張性高いものに変更していきます。  
        現在のままだと Alert, Confirmation Dialog, Sheet など、Navigation の対象が増える度に `State`, `Action` それぞれに `@Presents`, `PresentationAction` を利用したものを増やしていかなければいけません。  
        Navigation を管理するための新しい Reducer を定義し、この問題を解決します。  
        まずは、そのための `Destination` Reducer を作成します。  
        この Reducer は struct ではなく enum で表現します。Sheet, Alert などの Navigation は複数の種類が同時に発生することはあり得ないため、enum で表現することが適切です。

        @Code(name: "RepositoryListView.swift", file: 06-02-code-0001.swift, previousFile: 06-01-code-0003.swift)
      }
      @Step {
        次に `Destination` Reducer に case を追加します。  
        今まで Reducer には `State`, `Action`, `body` を定義してきましたが、Navigation 用の Reducer ではそれらを定義する必要はなく、Reducer enum に直接 case を定義していけば良い形になっています。  
        それでは、先ほど実装した Alert を移植するために `alert` case を追加しましょう。  
        
        @Code(name: "RepositoryListView.swift", file: 06-02-code-0002.swift)
        
        > Navigation を enum で表現すると、case の associated value で各 Navigation が必要とする状態を保持することができるため、よりシンプルに安全な形で Navigation の状態を表現できるというメリットもあります。
      }
      @Step {
        元々 `RepositoryList` Reducer に直接定義していた Alert 関係の処理を `Destination` Reducer にまとめたため、`RepositoryList` Reducer の諸々を修正します。
        
        @Code(name: "RepositoryListView.swift", file: 06-02-code-0003.swift)
      }
      @Step {
        View も少し修正していきます。  
        `RepositoryList` Reducer の `State`, `Action` に `destination` を追加したため、`alert` function の引数でも `destination` を利用するように書き換えます。

        @Code(name: "RepositoryListView.swift", file: 06-02-code-0004.swift, previousFile: 06-01-code-0005.swift)
      }
      @Step {
        ここまでで、リポジトリ詳細画面への遷移を表現するための下準備が整いました。  
        ここからは、リポジトリ詳細画面への Push 遷移を実装していきましょう。  
        リポジトリ詳細画面は、`RepositoryDetailView.swift` というファイル名でプロジェクト内に用意されています。基本的な実装は一通り済ませてあるので、`RepositoryDetailFeature` を import しつつ、`RepositoryDetail`の実装を `Destination` Reducer で利用するようにします。  
        
        @Code(name: "RepositoryListView.swift", file: 06-02-code-0005.swift, previousFile: 06-02-code-0003.swift)
      }
      @Step {
        Alert の場合は、Reducer で何らかの処理を実行する必要がなかったため考慮しませんでしたが、`Destination` Reducer で `RepositoryDetail` Reducer の処理を実行する必要が出てきたため、`Reducer.ifLet(_:action:)` を利用して `Destination` Reducer と `RepositoryList` Reducer を接続する必要があります。  
        そのためのコードを `RepositoryList` Reducer に追加しましょう。
        
        @Code(name: "RepositoryListView.swift", file: 06-02-code-0006.swift)

        > `destination` が Optional な状態として保持されており、その Optional な状態と接続するために Swift の Optional binding のような名前の `ifLet` という API を利用する必要があります。  
        > Collection に対しては `forEach`, Optional に対しては `ifLet` で接続すると覚えておくと理解しやすいかもしれません。
      }
      @Step {
        リポジトリ一覧の Row をタップした時に画面遷移させたいため、`RepositoryRow` Reducer に少し実装を追加します。  
        `RepositoryList` Reducer は `RepositoryRow` Reducer を管理しているため、`RepositoryRow` のどんな Action もハンドリングできますが、Parent Reducer に処理を委譲することを目的とした `Delegate` という namespace を切って新しい Action を作ります。  
        そして、その Action を `rowTapped` のタイミングで送るようにします。
        
        @Code(name: "RepositoryRowView.swift", file: 06-02-code-0007.swift, previousFile: 06-02-code-0007-previous.swift)
        
        > TCA は Reducer を容易に分割し結合することを強みとしていますが、分割された親子間の Reducer で何も考えずに Action をやり取りすると、コードはすぐに複雑になってしまいます。  
        > この問題を解決するための手段として、例えば今回のように `Delegate` という namespace を切るというものがあります。  
        > この方法は TCA community でも推奨されているものとなっていますが、詳細については [Action Boundaries という Discussion](https://github.com/pointfreeco/swift-composable-architecture/discussions/1440) などを参考にしてください。
      }
      @Step {
        送信した Delegate Action を Parent Reducer である `RepositoryList` Reducer 側で処理しましょう。  
        `RepositoryRow` がタップされたタイミングでリポジトリ詳細画面に遷移するようにしたいため、`State` に保持してある `destination` に `repositoryDetail` を格納します。

        @Code(name: "RepositoryListView.swift", file: 06-02-code-0008.swift, previousFile: 06-02-code-0006.swift)
      }
      @Step {
        最後に、`state.destination` の状態が変わったタイミングで Push 遷移が実行されるようにするために、iOS 16 から利用できる `navigationDestination` を利用して実装を追加します。  

        @Code(name: "RepositoryListView.swift", file: 06-02-code-0009.swift, previousFile: 06-02-code-0009-previous.swift)
      }
      @Step {
        この状態でアプリを実行してみれば、リポジトリ一覧画面の Row から各リポジトリ詳細画面に遷移できるようになっているはずです。確認してみましょう。

        @Image(source: "06-02-image-0010.gif", alt: "リポジトリ一覧画面からリポジトリ詳細画面に遷移している図")
      }
    }
  }
}
