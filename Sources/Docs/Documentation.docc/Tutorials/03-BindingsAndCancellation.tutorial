@Tutorial(time: 20) {
  @Intro(title: "TCA における Bindings・Cancellation") {
    次はここまでに作成してきたリポジトリ一覧画面に、リポジトリ検索機能を追加していきます。
    
    このチュートリアルでは、検索機能の実装を通して TCA における Bindings と Cancellation について学ぶことができます。
  }
  
  @Section(title: "BindingReducer") {
    @ContentAndMedia {
      リポジトリ一覧画面に検索機能を追加する前に、まずは Reducer で Binding を扱えるようにしていきましょう。  
      Pure SwiftUI では、通常 Binding を表現する際に `@Binding` を利用しますが、TCA においては `BindingAction`, `BindingReducer` という API を利用することで Binding が表現できます。
      
    }
    @Steps {
      @Step {
        まずは、`RepositoryList` Reducer に検索機能のための状態を追加します。  
        検索機能を実現するために、後ほど SwiftUI の `searchable` API を利用しますが、その API は `text` という引数に `Binding<String>` 型を要求します。  
        TCA の `State` においては、`Binding` を意識することなく通常通り変数を定義することができます。  
        今回は検索用の `text` なので `query` という変数を追加しておきましょう。
        
        @Code(name: "RepositoryListView.swift", file: 03-01-code-0001.swift, previousFile: 03-01-code-0001-previous.swift)
      }
      @Step {
        次に TCA において Binding を表現するために必要となる新しい Action も追加します。  
        Action においては、`BindableAction` と `BindingAction` という API を利用します。  
        `BindableAction` は `Action` に準拠させるための protocol として機能し、`BindableAction` protocol に準拠するためには `binding(BindingAction<State>)` という case を追加する必要があるため、それらを追加しましょう。
        
        @Code(name: "RepositoryListView.swift", file: 03-01-code-0002.swift)
      }
      @Step {
        最後に TCA における Binding の処理を実行する核である、`BindingReducer` を `body` に組み込む必要があります。  
        この API は `body` に組み込むだけで、先ほど追加した `Binding` として提供する `State` と `BindingAction` が機能するように作られています。  
        `body` では、先ほど追加した `binding` Action をハンドリングする必要がありますが、今のところは実行したい処理はないため、一旦 `none` を返すだけにしておきます。
        
        @Code(name: "RepositoryListView.swift", file: 03-01-code-0003.swift)
      }
    }
  }
  @Section(title: "View への検索機能の追加") {
    @ContentAndMedia {
      まだ Reducer に検索機能は追加していませんが、検索のための状態は用意されたので、一旦 `RepositoryListView` に検索のための機能を追加していきます。  

    }
    @Steps {
      @Step {
        View に検索機能を追加すると説明しましたが、SwiftUI には 検索機能を実現するための `searchable` が用意されているため、今回はそれを利用すれば View 側の実装はほとんど完了します。  
        `searchable` には前述の通り、`Binding<String>` を提供する必要があるため、先ほど用意した `query` を提供します。  
        `query` を `Binding<String>` として提供するためには、iOS 17 から利用できる `@Bindable` を利用して `store` を宣言しておく必要があります。  
        その形で `store` を宣言すれば、`$store.query` のようにすると `Binding<String>` を得ることができます。  
        また、ついでに `navigationTitle` も実装しておきましょう。

        @Code(name: "RepositoryListView.swift", file: 03-02-code-0001.swift, previousFile: 03-02-code-0001-previous.swift)
        
        > `@Bindable` も iOS 17 から利用できる API であるため、iOS 16 以下をサポートしている場合は swift-perception に用意されている `@Perception.Bindable` を代わりに利用する必要があります。その API の利用方法については [Observation backport](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/observationbackport) 等を参照してください。
      }
      @Step {
        `navigationTitle` と `searchable` は `NavigationStack` 配下で機能する API であるため、`NavigationStack` で View 全体を囲っておきましょう。

        @Code(name: "RepositoryListView.swift", file: 03-02-code-0002.swift)
      }
    }
  }
  @Section(title: "Reducer への検索機能の追加") {
    @ContentAndMedia {
      検索機能実装のための準備が整ったので、実際に Reducer に検索機能を実装していきましょう。  

    }
    @Steps {
      @Step {
        検索機能を実装するためには `searchable` の `text` が変更された際に、GitHub API の search エンドポイントに対してリクエストする必要があります。  
        現在、`searchable` の `text` には `$store.query` を指定していますが、この `query` が変更された時に API リクエストしなければいけません。  
        TCA の Binding 系の API には、State の変更タイミングに介入するための方法が用意されているため、Reducer にその処理を追加してみましょう。

        @Code(name: "RepositoryListView.swift", file: 03-03-code-0001.swift, previousFile: 03-01-code-0003.swift)
      }
      @Step {
        `query` が変更された時には search エンドポイントに対してリクエストする必要がありますが、`onAppear` のタイミングで既に API リクエストしているため、その処理を使い回します。  
        ほぼ共通の処理になるため function に処理を切り出しつつ、それを利用するようにしてみましょう。  
        `searchRepositories(by:)` function では、引数に受け取っている `query` を利用するように変更していることに注意しましょう。
        
        @Code(name: "RepositoryListView.swift", file: 03-03-code-0002.swift)
        
        > TCA で共通処理を切り出す際は、Action を増やすのではなく、今回のように function を作ってそこにまとめるようにしましょう。  
        > TCA において Action を send する行為は、決してコストが低いものではなく、Action を send しなくても良いようにできるのであればそれがベターです。  
        > 可読性とのバランスも考慮する必要がありますが、TCA を利用する際はそのことを頭に入れながら開発しましょう。
      }
      ここまでで `query` を入力する度にリポジトリ検索して、それがリストに反映されるような機能を作ることができました。  
      しかし、現状の実装のままだと `query` を少しでも入力する度に API リクエストが実行されてしまうようになっており、通信コスト的にもサーバー側的にもあまり良いとは言えない状況になっています。 
      @Step {
        `query` 入力の度に API リクエストするのではなく、`query` 入力から 0.3 秒経つごとにリクエストするような実装に書き換えて、問題を解決しましょう。  
        このような挙動のことを debounce と呼んだりしますが、TCA には `Effect.debounce` が用意されているため、これを `Effect.run` につけてあげると簡単にその挙動を実装できます。  
        `debounce` には `Hashable` な `id` が必要となるため、そのための enum を用意します。  
        また、`debounce` の挙動を実現するために、一つ Action も追加しましょう。
        
        @Code(name: "RepositoryListView.swift", file: 03-03-code-0003.swift)

        >  `Effect.debounce` は内部的には `Effect.cancellable` という API を利用しており、指定の秒数内に複数の処理が実行された場合に、古いものはキャンセルするという処理によって、debounce の挙動を実現しています。
      }
      @Step {
        検索機能と呼べるものが実装できたので、アプリを起動して挙動を確認しておきましょう。

        @Image(source: "03-03-image-0004.gif", alt: "アプリを起動して検索機能を確認している図")
      }
    }
  }
}
