@Tutorial(time: 30) {
  @Intro(title: "TCA を利用した View の実装") {
    TCA の基本を掴むために、まずは TCA を利用してシンプルな View を作っていきましょう。
    
    このチュートリアルでは、GitHub リポジトリの一覧画面を表示する機能を実装して、TCA の基本要素について学んでいきます。
  }

  @Section(title: "Reducer の実装") {
    @ContentAndMedia {
      最初にリポジトリ一覧画面に必要な状態や処理を管理するための `Reducer` と呼ばれるものを実装します。

      TCA における `Reducer` は protocol となっており、各機能ではこの `Redcuer` protocol に準拠した構造体を定義することになります。  
      `Reducer` に準拠するためには、アプリの機能に必要な状態・イベント・振る舞いなどを定義していく必要があります。
    }
    @Steps {
      @Step {
        まず、TCA に用意されている `Reducer` protocol に準拠した構造体を `RepositoryListView.swift` に作成します。  
        実際には、自分で `Reducer` protocol を利用するわけではなく、TCA に用意されている Swift Macro である `@Reducer` を利用し定義することになります。  
        TCA に用意されている API を利用するための `ComposableArchitecture` と、この後利用することになる `Foundation` および `Repository` という構造体を利用するための `Entity` module の import も行っておきます。

        @Code(name: "RepositoryListView.swift", file: 01-01-code-0001.swift)
      }
      @Step {
        `Reducer` protocol の準拠に必要となる要素の一つである `State` を実装します。
        `State` は `@ObservableState` Macro を利用して定義します。  
        `State` には機能に必要となる状態を定義します。基本的には struct で定義しますが enum など他の型を利用することもあります。  
        今回は基本的な状態を保持したいだけであるため、struct を利用します。  
        この後、「画面表示時に GitHub API Request を行い、そのレスポンスを受け取ってリポジトリ一覧を表示する」という挙動の実装を行います。  
        そのため、「複数のリポジトリを保持するための Array」と「API Request 中であることを判定するための Boolean」を `State` で保持するようにします。

        @Code(name: "RepositoryListView.swift", file: 01-01-code-0002.swift)
        
        > テストで State の変化を assertion できるようにするため、TCA において `State` は `Equatable` なものとして定義することがおすすめです。
      }
      @Step {
        次に `Reducer` protocol の準拠に必要となるもう一つの要素である `Action` を実装します。  
        `Action` には、ユーザーが起こしたタップイベントや、画面表示されたという SwiftUI のライフサイクルによるイベント、API Request の結果を受け取った際のイベントなど、様々なイベントを定義します。その性質上、`Action` は enum で定義することが一般的です。  
        今回の画面では、「画面が表示された」ことを表す Action をまず定義しておきましょう。

        @Code(name: "RepositoryListView.swift", file: 01-01-code-0003.swift)
      }
      @Step {
        次は「GitHub API Request の結果を受け取った」という Action を追加します。  
        この Action では、API の成功・失敗結果を値として表現する必要がありますが、Action に値を渡したい場合は enum の associated value を利用できます。  
        また、ここでは成功・失敗結果を表現するために Swift の `Result` 型を利用します。  
        
        @Code(name: "RepositoryListView.swift", file: 01-01-code-0004.swift)

        > `searchRepositoriesResponse` という Action 名になっているのは、リポジトリ一覧画面の表示時に GitHub API の search エンドポイントを叩く事情があるためです。  
      }
      @Step {
        次に `Reducer` protocol に準拠するための最後の要素である `body` の実装を行っていきます。  
        `body` は、何らかの `Action` が与えられた時に、`State` を現在の値から次の値へと変更する責務と、
        アプリが外の世界で実行すべき処理である `Effect` を返却する責務を持ちます。  
        基本的には TCA が用意してくれている `Reduce` という API を利用することで、これらを表現できます。  
        今回のアプリでは、画面表示のタイミングで GitHub API に対して Request を行うため、手始めに Request 前に `isLoading` の状態をロード中 (`true`) にするという処理を書いてみましょう。  
        この時点では、外の世界で実行したい処理は特にないため、それを表現する `Effect.none` を返却します。

        @Code(name: "RepositoryListView.swift", file: 01-01-code-0005.swift)

        > `body` の型となっている `ReducerOf<Self>` は `Reducer<Self.State, Self.Action>` という型の typealias となっています。
        > TCA では `XXXOf<YYY>` のような typealias がいくつか出てくるため、それを頭に入れておくと理解が進みやすいかもしれません。
        >
        > また、`Effect` の説明として「外の世界で実行する」という言葉が出てきましたが、これは例えば API 通信や UserDefaults へのアクセスなどが該当します。
      }
      @Step {
        画面表示のタイミングでは、GitHub API に対して Request する必要があるため、そのための処理を追加します。  
        先ほど説明した通り、API Request は「外の世界で実行される処理」に該当するため、`Effect` を返却する形で実装します。  
        基本的には TCA に用意されている `Effect.run` を利用することになります。   
        API Request は非同期処理となりますが、基本的に TCA では Reducer において `Effect.run` の中でのみ非同期処理を実行できます。  
        また、`Effect.run` は closure に `Send` という型の `@MainActor` が付与された型を提供しており、これを利用して `await send(.someAction)` のような形で、任意の Action を発火できます。  
        ここでの `Result` 内の処理は少し長くなっていますが、GitHub API の search エンドポイントに対してリクエストしているだけです。  
        後ほど、処理のリファクタリングは行います。
        
        @Code(name: "RepositoryListView.swift", file: 01-01-code-0006.swift)

        > `Bundle.main.infoDictionary` 経由で、事前に設定してもらった Personal Access Token を取得し、HTTP Header に利用することで、GitHub API の制限を回避しています。
      }
      @Step {
        最後に、API Request の結果を受け取るために定義していた Action で、先ほどの API Request の結果を処理します。  
        成功時にはレスポンスが返却されているので、それを `state.repositories` に格納し、失敗時は後ほど処理するため、一旦 TODO コメントを書いておきます。

        @Code(name: "RepositoryListView.swift", file: 01-01-code-0007.swift)
      }

      以上で基本的な Reducer の実装は一旦終わりです。  
      現時点では TCA における `Reducer` の基本的な実装方法、`State`, `Action`, `body` などについてざっくりと理解できていれば問題ありません。  
      次は今実装した Reducer を View に組み込んでいってみましょう。
    }
  }
  
  @Section(title: "SwiftUI View の実装") {
    @ContentAndMedia {
      それでは先ほど作成した Reducer を利用するシンプルなリポジトリ一覧画面を作っていきましょう。  
      このセクションでは、View における TCA の使い方を学ぶことができます。
    }
    @Steps {
      @Step {
        View のコードは Reducer を実装したファイルと同じファイルに実装していきます。  
        まずは View を作っていくために `SwiftUI` を import しつつ、`RepositoryListView` という名前の struct を追加します。
        
        @Code(name: "RepositoryListView.swift", file: 01-02-code-0001.swift)
        
        > ここでは、View のコードを Reducer と同じファイルに置いていますが、プロジェクトによっては別のファイルにしているところもあります。  
        > 個人的には同じファイルにしておくと、すぐに Reducer・View の実装を確認できて便利なのでそうしています。(Point-Free の好みとしても、同じファイルにするという話が公式チュートリアルで述べられていました)
      }
      @Step {
        次に、先ほど実装した Reducer と View を繋ぎ込むために TCA における `Store` という API を使っていきます。  
        `Store` は機能におけるランタイムとしての責務を担っており、先ほど定義した `Reducer` の実装に則って `State` を更新するために `Action` を処理したり、`Effect` を実行してくれたりしています。  
        `Store` を View で利用するために、View に `Store` 型の property を追加します。
        
        @Code(name: "RepositoryListView.swift", file: 01-02-code-0002.swift)
        
        > `StoreOf<XXX>` は先ほど出てきた `ReducerOf` と同じく typealias で、`Store<XXX.State, XXX.Action>` と等しいです。
      }
      @Step {
        `Store` を使えば、State を `store.someState` という形で取得したり、`store.send(.someAction)` という形で Action を送ることができるようになります。  
        実際にこれらの API  を使って、Action に定義した `onAppear` を画面表示時に発火させるコードと、ロード状態を使って `ProgressView` を表示するコードを追加します。

        @Code(name: "RepositoryListView.swift", file: 01-02-code-0003.swift)
      }
      @Step {
        次に `isLoading` が `false` になったタイミング、つまり API Response が返ってきた場合の View を簡単に実装します。  
        List 内の View を包んでいる `Button` の `action` は空ですが、後ほど実装します。  
        また、View のコードが長くなってきたため、リファクタリングしても良さそうですが、それについては後ほど対応していきます。
        
        @Code(name: "RepositoryListView.swift", file: 01-02-code-0004.swift)
      }
    }
  }

  @Section(title: "アプリの動作確認") {
    @ContentAndMedia {
      それでは、ここまでで作成してきた View の動作を確認していきましょう。  
      最初に Xcode Previews で View を Preview できるようにした後で、
      View を SwiftUI App のエントリポイントに繋ぎ込んで、アプリを起動して
      確認できるようにします。  
      このセクションでは、先ほど用意した `Store` の initialize 方法について主に学ぶことができます。
    }
    @Steps {
      @Step {
        まず Xcode Previews で `RepositoryListView` の挙動を確認するために、
        Xcode 15 から利用できるようになった Preview macro を使っていきましょう。  
        `RepositoryListView` には `StoreOf<RepositoryList>` を提供して initialize する必要があります。  
        `Store` には `init(initialState:reducer:withDependencies)` という initializer があり、
        これの `initialState` と `reducer` を最低限提供すれば initialize できます。
        (`withDependencies` については後ほど説明します。)    
        必要な値で initialize すれば、実際の API Request が発生する Previews が表示されます。(Scheme で RepositoryListFeature が選択されている必要があります。)

        @Code(name: "RepositoryListView.swift", file: 01-03-code-0001.swift, previousFile: 01-02-code-0004.swift) {
          @Image(source: "01-03-image-0001", alt: "Xcode Previews で RepositoryListView を表示している図")
        }
        
        > ちなみに initializer で利用している `RepositoryList` Reducer に `._printChanges()` をつけると、Reducer で起きた Action や State の変化を Xcode の Console に表示でき、デバッグに役立ちます。
      }
      @Step {
        続いて、アプリを起動して `RepositoryListView` を確認できるようにします。  
        アプリのエントリポイントは `iOS/App.swift` に用意されています。  
        冒頭で説明したように、このプロジェクトはマルチモジュール化されているため、`RepositoryListFeature` module のコードを `App.swift` から利用できるようにするために、追加の作業が必要です。  
        作業のために、まずは Project Settings を開いてください。

        @Image(source: "01-03-image-0002.png", alt: "Project Settings を開いている図")
      }
      @Step {
        TARGETS にある「TCAWorkshop」が選択されていることを確認したら、General タブにある「Frameworks, Libraries, and Embedded Content」の「+ ボタン」から「RepositoryListFeature」を選択して追加してください。
        
        @Image(source: "01-03-image-0003.png", alt: "Frameworks, Libraries, and Embedded Content の + ボタンから「RepositoryFeature」を追加している図")
      }
      @Step {
        次に `iOS/App.swift` 内で、先ほど追加した `RepositoryListFeature` を import しておきます。
        
        @Code(name: "App.swift", file: 01-03-code-0004.swift, previousFile: 01-03-code-0004-previous.swift)
      }
      @Step {
        最後に `WindowGroup` の中で `RepositoryListView` を initialize します。  
        initialize の手順は Xcode Previews の時と同じです。

        @Code(name: "App.swift", file: 01-03-code-0005.swift)
      }
      @Step {
        実際に Xcode でアプリを起動してみましょう。  
        リポジトリ一覧がリストで表示されていれば成功です！

        @Image(source: "01-03-image-0005.gif", alt: "アプリを起動している図")
      }
    }
  }
}
